<?php
// These stubs were generated by the phan stub generator.
// @phan-stub-for-extension PDO@8.2.9

namespace {
class PDO {

    // constants
    const PARAM_NULL = 0;
    const PARAM_BOOL = 5;
    const PARAM_INT = 1;
    const PARAM_STR = 2;
    const PARAM_LOB = 3;
    const PARAM_STMT = 4;
    const PARAM_INPUT_OUTPUT = 2147483648;
    const PARAM_STR_NATL = 1073741824;
    const PARAM_STR_CHAR = 536870912;
    const PARAM_EVT_ALLOC = 0;
    const PARAM_EVT_FREE = 1;
    const PARAM_EVT_EXEC_PRE = 2;
    const PARAM_EVT_EXEC_POST = 3;
    const PARAM_EVT_FETCH_PRE = 4;
    const PARAM_EVT_FETCH_POST = 5;
    const PARAM_EVT_NORMALIZE = 6;
    const FETCH_DEFAULT = 0;
    const FETCH_LAZY = 1;
    const FETCH_ASSOC = 2;
    const FETCH_NUM = 3;
    const FETCH_BOTH = 4;
    const FETCH_OBJ = 5;
    const FETCH_BOUND = 6;
    const FETCH_COLUMN = 7;
    const FETCH_CLASS = 8;
    const FETCH_INTO = 9;
    const FETCH_FUNC = 10;
    const FETCH_GROUP = 65536;
    const FETCH_UNIQUE = 196608;
    const FETCH_KEY_PAIR = 12;
    const FETCH_CLASSTYPE = 262144;
    const FETCH_SERIALIZE = 524288;
    const FETCH_PROPS_LATE = 1048576;
    const FETCH_NAMED = 11;
    const ATTR_AUTOCOMMIT = 0;
    const ATTR_PREFETCH = 1;
    const ATTR_TIMEOUT = 2;
    const ATTR_ERRMODE = 3;
    const ATTR_SERVER_VERSION = 4;
    const ATTR_CLIENT_VERSION = 5;
    const ATTR_SERVER_INFO = 6;
    const ATTR_CONNECTION_STATUS = 7;
    const ATTR_CASE = 8;
    const ATTR_CURSOR_NAME = 9;
    const ATTR_CURSOR = 10;
    const ATTR_ORACLE_NULLS = 11;
    const ATTR_PERSISTENT = 12;
    const ATTR_STATEMENT_CLASS = 13;
    const ATTR_FETCH_TABLE_NAMES = 14;
    const ATTR_FETCH_CATALOG_NAMES = 15;
    const ATTR_DRIVER_NAME = 16;
    const ATTR_STRINGIFY_FETCHES = 17;
    const ATTR_MAX_COLUMN_LEN = 18;
    const ATTR_EMULATE_PREPARES = 20;
    const ATTR_DEFAULT_FETCH_MODE = 19;
    const ATTR_DEFAULT_STR_PARAM = 21;
    const ERRMODE_SILENT = 0;
    const ERRMODE_WARNING = 1;
    const ERRMODE_EXCEPTION = 2;
    const CASE_NATURAL = 0;
    const CASE_LOWER = 2;
    const CASE_UPPER = 1;
    const NULL_NATURAL = 0;
    const NULL_EMPTY_STRING = 1;
    const NULL_TO_STRING = 2;
    const ERR_NONE = '00000';
    const FETCH_ORI_NEXT = 0;
    const FETCH_ORI_PRIOR = 1;
    const FETCH_ORI_FIRST = 2;
    const FETCH_ORI_LAST = 3;
    const FETCH_ORI_ABS = 4;
    const FETCH_ORI_REL = 5;
    const CURSOR_FWDONLY = 0;
    const CURSOR_SCROLL = 1;
    const MYSQL_ATTR_USE_BUFFERED_QUERY = 1000;
    const MYSQL_ATTR_LOCAL_INFILE = 1001;
    const MYSQL_ATTR_INIT_COMMAND = 1002;
    const MYSQL_ATTR_COMPRESS = 1003;
    const MYSQL_ATTR_DIRECT_QUERY = 1004;
    const MYSQL_ATTR_FOUND_ROWS = 1005;
    const MYSQL_ATTR_IGNORE_SPACE = 1006;
    const MYSQL_ATTR_SSL_KEY = 1007;
    const MYSQL_ATTR_SSL_CERT = 1008;
    const MYSQL_ATTR_SSL_CA = 1009;
    const MYSQL_ATTR_SSL_CAPATH = 1010;
    const MYSQL_ATTR_SSL_CIPHER = 1011;
    const MYSQL_ATTR_SERVER_PUBLIC_KEY = 1012;
    const MYSQL_ATTR_MULTI_STATEMENTS = 1013;
    const MYSQL_ATTR_SSL_VERIFY_SERVER_CERT = 1014;
    const MYSQL_ATTR_LOCAL_INFILE_DIRECTORY = 1015;

    // methods
    public function __construct(string $dsn, ?string $username = null, ?string $password = null, ?array $options = null) {}
    public function beginTransaction() : bool {}
    public function commit() : bool {}
    public function errorCode() : ?string {}
    public function errorInfo() : array {}
    public function exec(string $statement) : false|int {}
    public function getAttribute(int $attribute) : mixed {}
    public static function getAvailableDrivers() : array {}
    public function inTransaction() : bool {}
    public function lastInsertId(?string $name = null) : false|string {}
    public function prepare(string $query, array $options = []) : \PDOStatement|false {}
    public function query(string $query, ?int $fetchMode = null, mixed ...$fetchModeArgs) : \PDOStatement|false {}
    public function quote(string $string, int $type = \PDO::PARAM_STR) : false|string {}
    public function rollBack() : bool {}
    public function setAttribute(int $attribute, mixed $value) : bool {}
}

class PDOException extends \RuntimeException {

    // properties
    protected $code;
    public $errorInfo;
    protected $message;
    protected $file;
    protected $line;
}

final class PDORow {

    // properties
    public $queryString;
}

class PDOStatement implements \IteratorAggregate, \Traversable {

    // properties
    public $queryString;

    // methods
    public function bindColumn(int|string $column, mixed &$var, int $type = \PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null) : bool {}
    public function bindParam(int|string $param, mixed &$var, int $type = \PDO::PARAM_STR, int $maxLength = 0, mixed $driverOptions = null) : bool {}
    public function bindValue(int|string $param, mixed $value, int $type = \PDO::PARAM_STR) : bool {}
    public function closeCursor() : bool {}
    public function columnCount() : int {}
    public function debugDumpParams() : ?bool {}
    public function errorCode() : ?string {}
    public function errorInfo() : array {}
    public function execute(?array $params = null) : bool {}
    public function fetch(int $mode = \PDO::FETCH_DEFAULT, int $cursorOrientation = \PDO::FETCH_ORI_NEXT, int $cursorOffset = 0) : mixed {}
    public function fetchAll(int $mode = \PDO::FETCH_DEFAULT, mixed ...$args) : array {}
    public function fetchColumn(int $column = 0) : mixed {}
    public function fetchObject(?string $class = 'stdClass', array $constructorArgs = []) : false|object {}
    public function getAttribute(int $name) : mixed {}
    public function getColumnMeta(int $column) : array|false {}
    public function nextRowset() : bool {}
    public function rowCount() : int {}
    public function setAttribute(int $attribute, mixed $value) : bool {}
    public function setFetchMode(int $mode, mixed ...$args) {}
    public function getIterator() : \Iterator {}
}

function pdo_drivers() : array {}
}
